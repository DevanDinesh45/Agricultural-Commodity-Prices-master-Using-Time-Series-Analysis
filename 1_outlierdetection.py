# -*- coding: utf-8 -*-
"""1_Outlierdetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18j28u5kBlw1X9vipxWl3yPPb80huZ-Im
"""

import pandas as pd
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

def find_type_outliers(df):
  types=df["Type"].unique().tolist()
  for typ in types:
    data_temp=df[df["Type"]==typ]
    actual=len(data_temp)
    q1=data_temp["msprice"].quantile(0.25)
    q3=data_temp["msprice"].quantile(0.75)
    iqr=q3-q1
    lower_threshold=q1-1.5*iqr
    upper_threshold=q3+1.5*iqr
    data_filter=data_temp[(data_temp["msprice"]>lower_threshold)&(data_temp["msprice"]<upper_threshold)]
    filtered=len(data_filter)
    if actual!=filtered:
      print(typ)
    else:
      print("No outlier found in ",typ)

def plot_commodity_outliers(df): #plot commodity price outliers in a particular type
    commodities=list(df["commodity"].unique())
    flag=0
    for commodity in commodities:
        data_temp=df[df["commodity"]==commodity] # taking one type of commodity in one iteration
        actual=len(data_temp)
        if actual>1 :
            q1 = data_temp["msprice"].quantile(0.25)
            q3 = data_temp["msprice"].quantile(0.75)
            iqr = q3-q1 #Interquartile range
            lower_threshold  = q1-1.5*iqr
            upper_threshold = q3+1.5*iqr
            data_filter=data_temp[(data_temp["msprice"] > lower_threshold) & (data_temp["msprice"] < upper_threshold)]
            filtered=len(data_filter)
            if actual!=filtered:
                flag=1
                plt.figure(figsize=(6,4))
                plt.title(commodity)
                sns.boxplot(x="commodity", y="msprice",data=data_filter) #box plot
                sns.stripplot(x="commodity", y="msprice",data=data_temp,
                                 jitter=True,marker='o',alpha=0.5,color='red') #overlay data points (show outliers which are not compensated)
                patch_1 = mpatches.Patch(color='#31749F', label=commodity)
                patch_2 = mpatches.Patch(color='red',alpha=0.5,label='Data Points')
                plt.legend(handles=[patch_1,patch_2])
                plt.show()
    if flag==0:
        print("No commodity price outlier in ",df["Type"].iloc[0] )

def remove_outlier_cmo(df):
  data_main=pd.DataFrame()
  commodities=list(df["commodity"].unique())
  for commodity in commodities:
    data_temp=df[df["commodity"]==commodity]
    actual=len(data_temp)
    if actual>1:
      q1=data_temp["msprice"].quantile(0.25)
      q3=data_temp["msprice"].quantile(0.75)
      iqr=q3-q1
      lower_threshold=q1-q3*1.5
      upper_threshold=q1+q3*1.5
      data_temp=data_temp.loc[(data_temp["msprice"]>lower_threshold)&(data_temp['msprice']<upper_threshold)]
      data_temp.sort_values("year",inplace=True)
    data_main=pd.concat([data_main,data_temp])
    data_main.reset_index(drop=True,inplace=True)
    return data_main

"""**EDA**"""

df=pd.read_csv("/content/drive/MyDrive/Statistical-Time-Series-Analysis-on-Agricultural-Commodity-Prices-master/Raw data/CMO_MSP_Mandi.csv")
df=df.dropna(subset=["msprice"])

df.head(10)

"""**Boxplot Visualization**"""

plt.figure(figsize=(10,10))
sns.boxplot(x="Type",y="msprice",hue="Type",data=df)
sns.stripplot(y="msprice",x="Type",data=df,jitter=True,marker='o',alpha=0.5,color='black')
patch_1=mpatches.Patch(color="#5DBCD2",label="Kharif Crops")
patch_2 = mpatches.Patch(color='#E58028', label='Rabi Crops')
patch_3=mpatches.Patch(color="#297925",label="Other Crops")
patch_4=mpatches.Patch(color="black",label="Data Points",alpha=0.5)
plt.legend(handles=[patch_1,patch_2,patch_3,patch_4])
plt.show()

find_type_outliers(df)

df.dtypes

plot_commodity_outliers(df[df["Type"]=="Kharif Crops"])

plot_commodity_outliers(df[df["Type"]=="Rabi Crops"])

plot_commodity_outliers(df[df["Type"]=="Other Crops"])

###Remove outliers and save as csv

data=remove_outlier_cmo(df)
data.to_csv("CMO_MSP_MANDI_FILTERED.CSV",index=False)

def remove_outlier(df): #find outlier according to the modal price of commodity and remove them
    data_main=pd.DataFrame()
    commodities=list(df["Commodity"].unique())
    for commodity in commodities:
        data_temp=df[df["Commodity"]==commodity]
        actual=len(data_temp)
        if actual>1:
            q1 = data_temp["modal_price"].quantile(0.25)
            q3 = data_temp["modal_price"].quantile(0.75)
            iqr = q3-q1 #Interquartile range
            lower_threshold  = q1-1.5*iqr
            upper_threshold = q3+1.5*iqr
            filtered_values=[upper_threshold if x> upper_threshold else x for x in data_temp["modal_price"].tolist()]
            filtered_values=[lower_threshold if x< lower_threshold else x for x in filtered_values]
            data_temp["modal_price"]=filtered_values
            data_temp.sort_values("date",inplace=True)

        data_main=pd.concat([data_main,data_temp])
        data_main.reset_index(drop=True,inplace=True)
    return data_main

def plot_price_outliers(df):
  commodities=df["Commodity"].unique().tolist()
  flag=0
  for commodity in commodities:
    data_temp=df[df["Commodity"]==commodity]
    actual=len(data_temp)
    if actual>1:
      q1=data_temp["modal_price"].quantile(0.25)
      q3=data_temp["modal_price"].quantile(0.75)
      iqr=q3-q1
      lower_threshold=q1-1.5*iqr
      upper_threshold=q3+1.5*iqr
      data_filter=data_temp[(data_temp["modal_price"]>lower_threshold)& (data_temp["modal_price"]<upper_threshold)]
      filtered=len(data_filter)
      if actual!=filtered:
        flag=1
        plt.figure(figsize=(6,4))
        plt.title(commodity)
        sns.boxplot(x="Commodity",y="modal_price",data=data_filter)
        sns.stripplot(x="Commodity", y="modal_price",data=data_temp,
                                 jitter=True,marker='o',alpha=0.5,color='red')
        patch_1=mpatches.Patch(color="#31749F",label=commodity)
        patch_2=mpatches.Patch(color="red",alpha=0.5,label="Data Points")
        plt.legend(handles=[patch_1,patch_2])
        plt.show()

        if flag==0:
          print("No modal price outliers found")

df=pd.read_csv("/content/drive/MyDrive/Statistical-Time-Series-Analysis-on-Agricultural-Commodity-Prices-master/Raw data/Monthly_data_cmo.csv")
df["Commodity"]=df["Commodity"].apply(lambda x:x.lower())
df=df[df["modal_price"]!=0]
df["date"]=pd.to_datetime(df["date"])

df.shape

apmc=input("Enter APMC: ")
comm=input("Enter Commodity within that APMC: ")
df_temp=df[df["APMC"]==apmc]
df_temp=df_temp[df["Commodity"]==comm]
plot_price_outliers(df_temp)

df_filtered=pd.DataFrame()
for apmc in df["APMC"].unique().tolist():
    df_temp=df[df["APMC"]==apmc]
    data=remove_outlier(df_temp)
    df_filtered=pd.concat([df_filtered,data])

df_filtered.shape

df_filtered.reset_index(drop=True,inplace=True)
df_filtered.to_csv("Monthly_data_cmo_filtered.csv",index=False)